(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[17],{7476:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=o(2122),s=o(9756),r=(o(7294),o(3905)),i=["components"],l={sidebar_position:4,sidebar_label:"Subscribing to Hooks",title:"Subscribing to Hooks"},a=void 0,c={unversionedId:"workflows/subscribing_to_hooks",id:"workflows/subscribing_to_hooks",isDocsHomePage:!1,title:"Subscribing to Hooks",description:"During runtime, Cornell triggers blinker signals that",source:"@site/docs/workflows/subscribing_to_hooks.md",sourceDirName:"workflows",slug:"/workflows/subscribing_to_hooks",permalink:"/cornell/docs/workflows/subscribing_to_hooks",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Subscribing to Hooks",title:"Subscribing to Hooks"},sidebar:"defaultSidebar",previous:{title:"Adding Custom Matchers",permalink:"/cornell/docs/workflows/custom_matchers"}},u=[],g={toc:u};function p(e){var t=e.components,o=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"During runtime, Cornell triggers ",(0,r.kt)("a",{parentName:"p",href:"https://pythonhosted.org/blinker/"},"blinker signals")," that\nwill allow you to modify or extend some of the out-of-the-box functionality, at this point,\nthe following is available:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Replacing default logging service"),(0,r.kt)("li",{parentName:"ul"},"Modifying the listed cassette path (for example, if you prefer not to save your cassettes locally)")),(0,r.kt)("p",null,"List of signal can be found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hiredscorelabs/cornell/blob/master/cornell/signals.py"},"cornell/signals.py")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cornell.signals import logging_setup, process_cassette_file\n\n@logging_setup.connect\ndef setup_logging_service(_):\n    return logging_service\n\n\n@process_cassette_file.connect\ndef download_cassette_file(cassette_file_path):\n    storage = CornellCassettesStorage(logging_service)\n    return storage.download(cassette_file_path)\n\n\n@click.command(cls=CornellCmdOptions)\ndef start_mock_service(**kwargs):\n    start_cornell(**kwargs)\n\n\nif __name__ == "__main__":\n    start_mock_service()\n\n')),(0,r.kt)("p",null,"In the above example, we're replacing the default logging service with our own and in addition, every time Cornell requires a cassette file in runtime, we're downloading it from our dedicated storage."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Additional signals can be easily added, please feel free to open a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hiredscorelabs/cornell"},"PR")," or an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hiredscorelabs/cornell/issues"},"Issue"),"!"))}p.isMDXComponent=!0}}]);